import logging
import os
import traceback
import re
import socket
import atexit
import sys
import time
import random
import asyncio
import threading
from flask import Flask
from config import TOKEN, ADMIN_ID
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    PicklePersistence
)

# Initialize Flask app
app = Flask(__name__)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

# Global variable for the bot application
application = None

# Create a simple health check endpoint
@app.route('/')
def health_check():
    return "Bot is running!", 200

def run_flask():
    """Run Flask server for health checks"""
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª, —Ç–∞–∫–∂–µ —Å UTF-8
file_handler = logging.FileHandler("primaderma_bot.log", encoding='utf-8')
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logging.getLogger().addHandler(file_handler)

# –£–º–µ–Ω—å—à–∞–µ–º "—à—É–º" –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ HTTP
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
logger.info("–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
STATE = "state"
SUPPORT_STATE = "support"
AMBASSADOR_STATE = "ambassador"
QUIZ_STATE = "quiz"
QUIZ_STEP = "quiz_step"

# --- –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ---
PRODUCT_DESCRIPTIONS = {
    "cell_cleanser": {"name": "–ü–µ–Ω–∫–∞ –¥–ª—è —É–º—ã–≤–∞–Ω–∏—è ¬´–ù–µ–∂–Ω–æ—Å—Ç—å –æ—Ä—Ö–∏–¥–µ–∏¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_cream": {"name": "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ ¬´–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_serum": {"name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ ¬´–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_eye_cream": {"name": "–ö—Ä–µ–º –¥–ª—è –∫–æ–∂–∏ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑ –∏ –≥—É–±", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "glow_cream": {"name": "–ö—Ä–µ–º –æ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", "category": "–°–∏—è–Ω–∏–µ –∫–æ–∂–∏", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "glow_serum": {"name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ –æ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", "category": "–°–∏—è–Ω–∏–µ –∫–æ–∂–∏", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "hair_loss_lotion": {"name": "–õ–æ—Å—å–æ–Ω –æ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤–æ–ª–æ—Å", "category": "–°–∏–ª–∞ –≤–æ–ª–æ—Å", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "hair_growth_lotion": {"name": "–õ–æ—Å—å–æ–Ω –¥–ª—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å", "category": "–°–∏–ª–∞ –≤–æ–ª–æ—Å", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "collagen": {"name": "–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –ø–µ–ø—Ç–∏–¥–∞–º–∏", "category": "–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
}
PRODUCT_NAME_TO_KEY = {v['name']: k for k, v in PRODUCT_DESCRIPTIONS.items()}

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ (Inline) ---
def main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"), InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É", callback_data="start_quiz")],
        [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="support"), InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º", callback_data="ambassador")],
        [InlineKeyboardButton("üîó –°–æ—Ü—Å–µ—Ç–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="social")]
    ]
    return InlineKeyboardMarkup(keyboard)

def product_categories_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üí´ –≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", callback_data="category_–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫"), InlineKeyboardButton("‚ú® –°–∏—è–Ω–∏–µ –∫–æ–∂–∏", callback_data="category_–°–∏—è–Ω–∏–µ –∫–æ–∂–∏")],
        [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –°–∏–ª–∞ –≤–æ–ª–æ—Å", callback_data="category_–°–∏–ª–∞ –≤–æ–ª–æ—Å"), InlineKeyboardButton("ü•§ –ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω", callback_data="category_–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω")],
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ---
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ Primaderma.\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ, –∞–∫—Ü–∏—è—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"
        "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard())

async def main_menu_nav(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    context.user_data.clear()
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        reply_markup=main_menu_keyboard()
    )

# --- –ö–ê–¢–ê–õ–û–ì –ü–†–û–î–£–ö–¢–û–í ---
async def show_products(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    keyboard = product_categories_keyboard()
    logger.info(f"[DEBUG] Catalog keyboard: {keyboard.inline_keyboard}")
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

async def show_product_list_by_category(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    category_name = query.data.split('_', 1)[1]
    context.user_data['current_category'] = category_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
    
    products_in_category = [prod["name"] for prod in PRODUCT_DESCRIPTIONS.values() if prod.get("category") == category_name]
    
    if not products_in_category:
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
            reply_markup=product_categories_keyboard()
        )
        return

    keyboard_buttons = [[InlineKeyboardButton(name, callback_data=f"product_{PRODUCT_NAME_TO_KEY[name]}")] for name in products_in_category]
    keyboard_buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")])
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    logger.info(f"[DEBUG] Product list keyboard: {keyboard.inline_keyboard}")
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=keyboard
    )

async def show_product_detail(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    product_key = query.data.split('_', 1)[1]
    product_data = PRODUCT_DESCRIPTIONS.get(product_key)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {product_key}")

    if product_data:
        category_name = product_data.get('category')
        details_text = (
            f"<b>{product_data['name']}</b>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{product_data['description']}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{product_data['ingredients']}\n\n"
            f"<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n{product_data['usage']}\n\n"
            f"<b>–£–ø–∞–∫–æ–≤–∫–∞:</b>\n{product_data['packaging']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data=f"category_{category_name}")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]
        ]
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=details_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    else:
        logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–ª—é—á–æ–º '{product_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=product_categories_keyboard()
        )

# --- –°–û–¶–°–ï–¢–ò –ò –ú–ê–ì–ê–ó–ò–ù–´ ---
async def social_and_shops(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Ü—Å–µ—Ç–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã.")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Å—Å—ã–ª–∫–∞–º–∏
    text = (
        "<b>–ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:</b>\n"
        "‚Ä¢ <a href=\"https://www.instagram.com/primaderma.ru?igsh=ZmFiOWF0OWJzM2ti\">Instagram</a>\n"
        "‚Ä¢ <a href=\"https://vk.com/dermacare\">–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</a>\n"
        "‚Ä¢ <a href=\"https://t.me/+AW87XFPmPesyZjZi\">Telegram</a>\n\n"
        "<b>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:</b>\n"
        "‚Ä¢ <a href=\"https://primaderma.ru/\">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç</a>\n"
        "‚Ä¢ <a href=\"https://goldapple.ru/brands/primaderma\">–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ</a>\n"
        "‚Ä¢ <a href=\"https://www.letu.ru/brand/primaderma\">–õ–µ—Ç—É–∞–ª—å</a>\n"
        "‚Ä¢ <a href=\"https://www.wildberries.ru/brands/310708162-primaderma\">Wildberries</a>\n"
        "‚Ä¢ <a href=\"https://www.ozon.ru/seller/dr-gallyamova-132298/?miniapp=seller_132298\">Ozon</a>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML',
        disable_web_page_preview=True
    )

# --- –î–ò–ê–õ–û–ì–ò (–ü–û–î–î–ï–†–ñ–ö–ê, –ê–ú–ë–ê–°–°–ê–î–û–†) ---
async def start_support_dialog(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    context.user_data[STATE] = SUPPORT_STATE
    keyboard = [[InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]]
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_ambassador_dialog(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º.")
    context.user_data[STATE] = AMBASSADOR_STATE
    keyboard = [[InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]]
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–û—Ç–ª–∏—á–Ω–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º Primaderma! –ß—Ç–æ–±—ã –º—ã –≤–∞—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ—Ö–≤–∞—Ç, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, engagement).",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –ö–í–ò–ó (—Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º) ---
async def product_quiz_start(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –∫–≤–∏–∑.")
    context.user_data[STATE] = QUIZ_STATE
    context.user_data[QUIZ_STEP] = 1
    keyboard = [
        [InlineKeyboardButton("–°—É—Ö–∞—è", callback_data="quiz_1_–°—É—Ö–∞—è"), InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="quiz_1_–ù–æ—Ä–º–∞–ª—å–Ω–∞—è")],
        [InlineKeyboardButton("–ñ–∏—Ä–Ω–∞—è", callback_data="quiz_1_–ñ–∏—Ä–Ω–∞—è"), InlineKeyboardButton("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="quiz_1_–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")],
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.info(f"[DEBUG] Quiz keyboard (Q1): {reply_markup.inline_keyboard}")
    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–®–∞–≥ 1/3: –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∫–æ–∂–∏?",
        reply_markup=reply_markup
    )

async def handle_quiz_answer(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    step, answer = query.data.split('_')[1:]
    step = int(step)

    if step == 1:
        context.user_data['skin_type'] = answer
        context.user_data[QUIZ_STEP] = 2
        keyboard = [
            [InlineKeyboardButton("–ú–æ—Ä—â–∏–Ω—ã", callback_data="quiz_2_–ú–æ—Ä—â–∏–Ω—ã"), InlineKeyboardButton("–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="quiz_2_–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è")],
            [InlineKeyboardButton("–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏", callback_data="quiz_2_–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏"), InlineKeyboardButton("–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç", callback_data="quiz_2_–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        logger.info(f"[DEBUG] Quiz keyboard (Q2): {reply_markup.inline_keyboard}")
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–®–∞–≥ 2/3: –ö–∞–∫–∞—è —É –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–∂–∏?",
            reply_markup=reply_markup
        )
    
    elif step == 2:
        context.user_data['skin_concern'] = answer
        context.user_data[QUIZ_STEP] = 3
        keyboard = [
            [InlineKeyboardButton("–î–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ", callback_data="quiz_3_–î–∞"), InlineKeyboardButton("–ò–Ω–æ–≥–¥–∞", callback_data="quiz_3_–ò–Ω–æ–≥–¥–∞")],
            [InlineKeyboardButton("–†–µ–¥–∫–æ", callback_data="quiz_3_–†–µ–¥–∫–æ"), InlineKeyboardButton("–ù–µ—Ç, –Ω–∏–∫–æ–≥–¥–∞", callback_data="quiz_3_–ù–µ—Ç")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        logger.info(f"[DEBUG] Quiz keyboard (Q3): {reply_markup.inline_keyboard}")
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–®–∞–≥ 3/3: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–π—á–∞—Å –∫–∞–∫–∏–µ-–ª–∏–±–æ —É—Ö–æ–¥–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ª–∏—Ü–∞?",
            reply_markup=reply_markup
        )
    
    elif step == 3:
        context.user_data['current_routine'] = answer
        skin_type = context.user_data.get('skin_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        skin_concern = context.user_data.get('skin_concern', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        
        # –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if skin_concern == "–ú–æ—Ä—â–∏–Ω—ã":
            recommended_product_key = "cell_serum"
            recommendation_text = "–î–ª—è –±–æ—Ä—å–±—ã —Å –º–æ—Ä—â–∏–Ω–∞–º–∏ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—à—É —Å—ã–≤–æ—Ä–æ—Ç–∫—É '–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫', –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞—Ç—å –º–æ—Ä—â–∏–Ω—ã –∏ —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ–∂–∏."
        elif skin_concern == "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è":
            recommended_product_key = "glow_serum"
            recommendation_text = "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –Ω–∞—à–∞ —Å—ã–≤–æ—Ä–æ—Ç–∫–∞ –æ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–≤–µ—Ç–ª—è–µ—Ç –ø–∏–≥–º–µ–Ω—Ç–Ω—ã–µ –ø—è—Ç–Ω–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ–Ω –∫–æ–∂–∏."
        else:
            recommended_product_key = "cell_cream"
            recommendation_text = "–î–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—à –∫—Ä–µ–º '–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫', –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ."
        
        final_text = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º:\n\n{recommendation_text}"
        product_name = PRODUCT_DESCRIPTIONS[recommended_product_key]['name']
        keyboard = [
            [InlineKeyboardButton(f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ¬´{product_name}¬ª", callback_data=f"product_{recommended_product_key}")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await query.delete_message()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=final_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        context.user_data.clear()



# --- –ê–î–ú–ò–ù–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ---
async def dispatch_text_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –í–µ—Ç–∫–∞ 1: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∞, –∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if user.id == int(ADMIN_ID) and update.message.reply_to_message:
        replied_message = update.message.reply_to_message
        original_user_id = None
        
        # –ò—â–µ–º ID –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
        text_to_search = replied_message.text or replied_message.caption
        if text_to_search:
            match = re.search(r"\[user_id=(\d+)\]", text_to_search)
            if match:
                original_user_id = int(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        if not original_user_id and replied_message.forward_from:
            original_user_id = replied_message.forward_from.id

        if original_user_id:
            try:
                await context.bot.send_message(
                    chat_id=original_user_id,
                    text=f"üí¨ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_user_id}: {e}")
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. Message ID: {update.message.message_id}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `[user_id=...]`.")
    
    # –í–µ—Ç–∫–∞ 2: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∞–¥–º–∏–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    else:
        user_state = context.user_data.get(STATE)
        if not user_state:
            await unknown(update, context)
            return

        text = update.message.text
        if user_state == SUPPORT_STATE:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç {user.id}: {text}")
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{user.username} [user_id={user.id}]:\n\n{text}")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu_keyboard())
        
        context.user_data.clear()

async def handle_media_message(update: Update, context: CallbackContext) -> None:
    user_state = context.user_data.get(STATE)
    if user_state != AMBASSADOR_STATE:
        await unknown(update, context)
        return

    user = update.effective_user
    caption = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç @{user.username} [user_id={user.id}]"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç {user.id}")

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=file_id, caption=caption)
    elif update.message.document:
        file_id = update.message.document.file_id
        await context.bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=caption)

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_text = (
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã.\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n\n"
        "–ü–æ–∫–∞ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä PRIMADERMA –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—ë—Ç –≤–∞—à—É –∫—Ä–∞—Å–æ—Ç—É –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å.\n\n"
        "üåê –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π: https://primaderma.ru/"
    )
    
    await update.message.reply_text(
        text=response_text,
        reply_markup=main_menu_keyboard(),
        disable_web_page_preview=True
    )
    context.user_data.clear()

async def unknown(update: Update, context: CallbackContext):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_menu_keyboard()
        )

async def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    global application
    if application and application.running:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def setup_application() -> Application:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application"""
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    
    if not TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py.")
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    persistence = PicklePersistence(filepath="bot_persistence.pkl")
    application = Application.builder()\
        .token(TOKEN)\
        .persistence(persistence)\
        .build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, dispatch_text_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    return application

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global application
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = await setup_application()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å long polling
        await application.initialize()
        await application.start()
        await application.updater.start_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å
            
    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise
    finally:
        await cleanup()

def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("Flask health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (0-10 —Å–µ–∫—É–Ω–¥)
    delay = random.uniform(0, 10)
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    time.sleep(delay)
    
    if not TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py.")
        return

    persistence = PicklePersistence(filepath="bot_persistence.pkl")
    global application
    application = Application.builder().token(TOKEN).persistence(persistence).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    application.add_handler(CommandHandler("start", start))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    application.add_handler(CallbackQueryHandler(main_menu_nav, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(show_products, pattern="^catalog$"))
    application.add_handler(CallbackQueryHandler(show_product_list_by_category, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(show_product_detail, pattern="^product_"))
    application.add_handler(CallbackQueryHandler(social_and_shops, pattern="^social$"))

    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(CallbackQueryHandler(start_support_dialog, pattern="^support$"))
    application.add_handler(CallbackQueryHandler(start_ambassador_dialog, pattern="^ambassador$"))
    application.add_handler(CallbackQueryHandler(product_quiz_start, pattern="^start_quiz$"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
    application.add_handler(CallbackQueryHandler(handle_quiz_answer, pattern="^quiz_\\d+"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, dispatch_text_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_media_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –¥–∏–∞–ª–æ–≥–æ–≤...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å drop_pending_updates –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            allowed_updates=Update.ALL_TYPES,
            stop_signals=None  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
        )
        return lock_file_handle
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

        import sys
        sys.exit(1)

if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        loop.run_until_complete(main())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
        loop.run_forever()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if 'loop' in locals():
            try:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                tasks = [t for t in asyncio.all_tasks(loop) if not t.done()]
                for task in tasks:
                    task.cancel()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
                if tasks:
                    loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                loop.run_until_complete(loop.shutdown_asyncgens())
                loop.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        sys.exit(0)