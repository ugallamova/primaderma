import logging
import os
import traceback
import re
from config import TOKEN, ADMIN_ID

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(
    level=logging.INFO,
    format=log_format,
    handlers=[
        logging.FileHandler("primaderma_bot.log"),
        logging.StreamHandler()
    ]
)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
STATE = "state"
SUPPORT_STATE = "support"
AMBASSADOR_STATE = "ambassador"
QUIZ_STATE = "quiz"
QUIZ_STEP = "quiz_step"

# --- –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ---
PRODUCT_DESCRIPTIONS = {
    "cell_cleanser": {"name": "–ü–µ–Ω–∫–∞ –¥–ª—è —É–º—ã–≤–∞–Ω–∏—è ¬´–ù–µ–∂–Ω–æ—Å—Ç—å –æ—Ä—Ö–∏–¥–µ–∏¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_cream": {"name": "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞ ¬´–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_serum": {"name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ ¬´–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫¬ª", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "cell_eye_cream": {"name": "–ö—Ä–µ–º –¥–ª—è –∫–æ–∂–∏ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑ –∏ –≥—É–±", "category": "–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "glow_cream": {"name": "–ö—Ä–µ–º –æ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", "category": "–°–∏—è–Ω–∏–µ –∫–æ–∂–∏", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "glow_serum": {"name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ –æ—Ç –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", "category": "–°–∏—è–Ω–∏–µ –∫–æ–∂–∏", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "hair_loss_lotion": {"name": "–õ–æ—Å—å–æ–Ω –æ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤–æ–ª–æ—Å", "category": "–°–∏–ª–∞ –≤–æ–ª–æ—Å", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "hair_growth_lotion": {"name": "–õ–æ—Å—å–æ–Ω –¥–ª—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å", "category": "–°–∏–ª–∞ –≤–æ–ª–æ—Å", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
    "collagen": {"name": "–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω —Å –ø–µ–ø—Ç–∏–¥–∞–º–∏", "category": "–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω", "description": "...", "ingredients": "...", "usage": "...", "packaging": "..."},
}
PRODUCT_NAME_TO_KEY = {v['name']: k for k, v in PRODUCT_DESCRIPTIONS.items()}

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ (Inline) ---
def main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"), InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É", callback_data="start_quiz")],
        [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="support"), InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º", callback_data="ambassador")],
        [InlineKeyboardButton("üîó –°–æ—Ü—Å–µ—Ç–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="social")]
    ]
    return InlineKeyboardMarkup(keyboard)

def product_categories_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üí´ –≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫", callback_data="category_–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫"), InlineKeyboardButton("‚ú® –°–∏—è–Ω–∏–µ –∫–æ–∂–∏", callback_data="category_–°–∏—è–Ω–∏–µ –∫–æ–∂–∏")],
        [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –°–∏–ª–∞ –≤–æ–ª–æ—Å", callback_data="category_–°–∏–ª–∞ –≤–æ–ª–æ—Å"), InlineKeyboardButton("ü•§ –ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω", callback_data="category_–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω")],
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ---
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ Primaderma.\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ, –∞–∫—Ü–∏—è—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"
        "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard())

async def main_menu_nav(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    context.user_data.clear()
    await query.edit_message_text(text="–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=main_menu_keyboard())

# --- –ö–ê–¢–ê–õ–û–ì –ü–†–û–î–£–ö–¢–û–í ---
async def show_products(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–æ—à–µ–ª –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=product_categories_keyboard())

async def show_product_list_by_category(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    category_name = query.data.split('_', 1)[1]
    context.user_data['current_category'] = category_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
    
    products_in_category = [prod["name"] for prod in PRODUCT_DESCRIPTIONS.values() if prod.get("category") == category_name]
    
    if not products_in_category:
        await query.edit_message_text(text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=product_categories_keyboard())
        return

    keyboard_buttons = [[InlineKeyboardButton(name, callback_data=f"product_{PRODUCT_NAME_TO_KEY[name]}")] for name in products_in_category]
    keyboard_buttons.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")])
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=InlineKeyboardMarkup(keyboard_buttons))

async def show_product_detail(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    product_key = query.data.split('_', 1)[1]
    product_data = PRODUCT_DESCRIPTIONS.get(product_key)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {product_key}")

    if product_data:
        category_name = product_data.get('category')
        details_text = (
            f"<b>{product_data['name']}</b>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{product_data['description']}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{product_data['ingredients']}\n\n"
            f"<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</b>\n{product_data['usage']}\n\n"
            f"<b>–£–ø–∞–∫–æ–≤–∫–∞:</b>\n{product_data['packaging']}"
        )
        keyboard = [
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data=f"category_{category_name}")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]
        ]
        await query.edit_message_text(text=details_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    else:
        logger.warning(f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–ª—é—á–æ–º '{product_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.edit_message_text(text="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=product_categories_keyboard())

# --- –°–û–¶–°–ï–¢–ò –ò –ú–ê–ì–ê–ó–ò–ù–´ ---
async def social_and_shops(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Ü—Å–µ—Ç–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã.")
    text = "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –ø–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞—à—É –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –ª—É—á—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö!"
    keyboard = [
        [InlineKeyboardButton("Instagram", url="https://instagram.com/primaderma")],
        [InlineKeyboardButton("Telegram-–∫–∞–Ω–∞–ª", url="https://t.me/primaderma_channel")],
        [InlineKeyboardButton("Wildberries", url="https://www.wildberries.ru/brands/primaderma")],
        [InlineKeyboardButton("Ozon", url="https://www.ozon.ru/seller/primaderma-289547/")],
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

# --- –î–ò–ê–õ–û–ì–ò (–ü–û–î–î–ï–†–ñ–ö–ê, –ê–ú–ë–ê–°–°–ê–î–û–†) ---
async def start_support_dialog(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    context.user_data[STATE] = SUPPORT_STATE
    keyboard = [[InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=InlineKeyboardMarkup(keyboard))



async def start_ambassador_dialog(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º.")
    context.user_data[STATE] = AMBASSADOR_STATE
    keyboard = [[InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ä–µ–∑—é–º–µ.", reply_markup=InlineKeyboardMarkup(keyboard))





# --- –ö–í–ò–ó (—Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º) ---
async def product_quiz_start(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –∫–≤–∏–∑.")
    context.user_data[STATE] = QUIZ_STATE
    context.user_data[QUIZ_STEP] = 1
    keyboard = [
        [InlineKeyboardButton("–°—É—Ö–∞—è", callback_data="quiz_1_–°—É—Ö–∞—è"), InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="quiz_1_–ù–æ—Ä–º–∞–ª—å–Ω–∞—è")],
        [InlineKeyboardButton("–ñ–∏—Ä–Ω–∞—è", callback_data="quiz_1_–ñ–∏—Ä–Ω–∞—è"), InlineKeyboardButton("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="quiz_1_–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")],
        [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.edit_message_text(text="–®–∞–≥ 1/3: –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∫–æ–∂–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_quiz_answer(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    step, answer = query.data.split('_')[1:]
    step = int(step)

    if step == 1:
        context.user_data['skin_type'] = answer
        context.user_data[QUIZ_STEP] = 2
        keyboard = [
            [InlineKeyboardButton("–ú–æ—Ä—â–∏–Ω—ã", callback_data="quiz_2_–ú–æ—Ä—â–∏–Ω—ã"), InlineKeyboardButton("–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="quiz_2_–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è")],
            [InlineKeyboardButton("–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏", callback_data="quiz_2_–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏"), InlineKeyboardButton("–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç", callback_data="quiz_2_–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await query.edit_message_text(text="–®–∞–≥ 2/3: –ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?", reply_markup=InlineKeyboardMarkup(keyboard))
    elif step == 2:
        context.user_data['concern'] = answer
        context.user_data[QUIZ_STEP] = 3
        keyboard = [
            [InlineKeyboardButton("–î–æ 25", callback_data="quiz_3_–î–æ 25"), InlineKeyboardButton("25-35", callback_data="quiz_3_25-35")],
            [InlineKeyboardButton("35-45", callback_data="quiz_3_35-45"), InlineKeyboardButton("45+", callback_data="quiz_3_45+")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await query.edit_message_text(text="–®–∞–≥ 3/3: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=InlineKeyboardMarkup(keyboard))
    elif step == 3:
        context.user_data['age_range'] = answer
        concern = context.user_data.get('concern')
        recommendation_text, recommended_product_key = ("–ù–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç - <b>–ü–∏—Ç—å–µ–≤–æ–π –∫–æ–ª–ª–∞–≥–µ–Ω</b>.", "collagen")
        if concern in ["–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", "–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç"]:
            recommendation_text, recommended_product_key = ("–õ–∏–Ω–µ–π–∫—É <b>¬´–°–∏—è–Ω–∏–µ –∫–æ–∂–∏¬ª</b>.", "glow_serum")
        elif concern in ["–ú–æ—Ä—â–∏–Ω—ã", "–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏"]:
            recommendation_text, recommended_product_key = ("–õ–∏–Ω–µ–π–∫—É <b>¬´–≠–Ω–µ—Ä–≥–∏—è –∫–ª–µ—Ç–æ–∫¬ª</b>.", "cell_serum")
        
        final_text = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º:\n\n{recommendation_text}"
        product_name = PRODUCT_DESCRIPTIONS[recommended_product_key]['name']
        keyboard = [
            [InlineKeyboardButton(f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ¬´{product_name}¬ª", callback_data=f"product_{recommended_product_key}")],
            [InlineKeyboardButton("‚Üê –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await query.edit_message_text(text=final_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        context.user_data.clear()



# --- –ê–î–ú–ò–ù–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ---
async def dispatch_text_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –í–µ—Ç–∫–∞ 1: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∞, –∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if user.id == int(ADMIN_ID) and update.message.reply_to_message:
        replied_message = update.message.reply_to_message
        original_user_id = None
        
        # –ò—â–µ–º ID –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
        text_to_search = replied_message.text or replied_message.caption
        if text_to_search:
            match = re.search(r"\[user_id=(\d+)\]", text_to_search)
            if match:
                original_user_id = int(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        if not original_user_id and replied_message.forward_from:
            original_user_id = replied_message.forward_from.id

        if original_user_id:
            try:
                await context.bot.send_message(
                    chat_id=original_user_id,
                    text=f"üí¨ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_user_id}: {e}")
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. Message ID: {update.message.message_id}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `[user_id=...]`.")
    
    # –í–µ—Ç–∫–∞ 2: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∞–¥–º–∏–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    else:
        user_state = context.user_data.get(STATE)
        if not user_state:
            await unknown(update, context)
            return

        text = update.message.text
        if user_state == SUPPORT_STATE:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç {user.id}: {text}")
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{user.username} [user_id={user.id}]:\n\n{text}")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu_keyboard())
        
        context.user_data.clear()

async def handle_media_message(update: Update, context: CallbackContext) -> None:
    user_state = context.user_data.get(STATE)
    if user_state != AMBASSADOR_STATE:
        await unknown(update, context)
        return

    user = update.effective_user
    caption = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç @{user.username} [user_id={user.id}]"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –æ—Ç {user.id}")

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=file_id, caption=caption)
    elif update.message.document:
        file_id = update.message.document.file_id
        await context.bot.send_document(chat_id=ADMIN_ID, document=file_id, caption=caption)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu_keyboard())
    context.user_data.clear()

async def unknown(update: Update, context: CallbackContext):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())

def main() -> None:
    if not TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py.")
        return

    application = Application.builder().token(TOKEN).build()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    application.add_handler(CommandHandler("start", start))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    application.add_handler(CallbackQueryHandler(main_menu_nav, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(show_products, pattern="^catalog$"))
    application.add_handler(CallbackQueryHandler(show_product_list_by_category, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(show_product_detail, pattern="^product_"))
    application.add_handler(CallbackQueryHandler(social_and_shops, pattern="^social$"))

    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(CallbackQueryHandler(start_support_dialog, pattern="^support$"))
    application.add_handler(CallbackQueryHandler(start_ambassador_dialog, pattern="^ambassador$"))
    application.add_handler(CallbackQueryHandler(product_quiz_start, pattern="^start_quiz$"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
    application.add_handler(CallbackQueryHandler(handle_quiz_answer, pattern="^quiz_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, dispatch_text_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_media_message))
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –¥–∏–∞–ª–æ–≥–æ–≤...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()